{"version":3,"sources":["components/MainAppBar.component.jsx","components/MainPage.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","MainAppBar","classes","className","AppBar","position","Toolbar","Typography","variant","MainPage","useState","selectedTeam","setSelectedTeam","selectedSeason","setSelectedSeason","allTeams","setAllTeams","stats","setStats","afterMadePercentage","afterMissPercentage","totalPlayers","counts","setCounts","fetchGames","a","fetch","gamesRaw","json","gamesJson","Object","keys","map","teamName","teamId","fetchStats","statsRaw","statsJson","allFieldsStats","values","playerStats","internalCounts","length","relevantFieldsStats","player","regularPercentage","useEffect","handleSeasonChange","event","target","value","handleTeamChange","years","Array","YEAR_BACK","toString","shortYearNum","Grid","style","paddingTop","container","item","xs","height","Select","onChange","season","MenuItem","JSON","stringify","justify","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","playerRow","key","color","includes","App","rel","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85d9a39f.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function MainAppBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\">NBA - Hot Hand Project</Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst YEARS_BACK = 10;\n\nexport default function MainPage() {\n  const [selectedTeam, setSelectedTeam] = useState(null);\n  const [selectedSeason, setSelectedSeason] = useState(\"2020-21\");\n  const [allTeams, setAllTeams] = useState([]);\n  const [stats, setStats] = useState([]);\n  const [counts, setCounts] = useState({\n    afterMadePercentage: 0,\n    afterMissPercentage: 0,\n    totalPlayers: 0,\n  });\n\n  const fetchGames = async () => {\n    const gamesRaw = await fetch(`/games/${selectedSeason}`);\n    const gamesJson = await gamesRaw.json();\n    setAllTeams(\n      Object.keys(gamesJson).map((teamName) => [\n        teamName,\n        gamesJson[teamName].teamId,\n      ])\n    );\n  };\n\n  const fetchStats = async () => {\n    const statsRaw = await fetch(`/stats/${selectedTeam}/${selectedSeason}`);\n    const statsJson = await statsRaw.json();\n    const allFieldsStats = Object.values(statsJson)[0]\n      .map((playerStats) => Object.values(playerStats))\n      .map(([obj]) => obj);\n    const internalCounts = {\n      afterMadePercentage: 0,\n      afterMissPercentage: 0,\n      totalPlayers: allFieldsStats.length,\n    };\n\n    const relevantFieldsStats = allFieldsStats.map(\n      ({\n        player,\n        regularPercentage,\n        afterMadePercentage,\n        afterMissPercentage,\n      }) => {\n        if (afterMadePercentage > regularPercentage) {\n          internalCounts.afterMadePercentage++;\n        }\n        if (afterMissPercentage > regularPercentage) {\n          internalCounts.afterMissPercentage++;\n        }\n\n        return {\n          player,\n          regularPercentage,\n          afterMadePercentage,\n          afterMissPercentage,\n        };\n      }\n    );\n    setCounts(internalCounts);\n    setStats(relevantFieldsStats);\n  };\n\n  useEffect(() => {\n    allTeams.length && setSelectedTeam(allTeams[0][1]);\n  }, [allTeams]);\n\n  useEffect(() => {\n    if (selectedTeam && selectedSeason) {\n      fetchStats();\n      // fetchData();\n      // .then(data => console.log(data));  }, [selectedTeam, selectedSeason]);\n    }\n  }, [selectedTeam]);\n  const handleSeasonChange = async (event) => {\n    setSelectedSeason(event.target.value);\n    await fetchGames();\n  };\n\n  const handleTeamChange = async (event) => {\n    setSelectedTeam(event.target.value);\n  };\n\n  let yearNum = 2020;\n  let shortYearNum = 20;\n\n  const years = [...Array(YEARS_BACK).keys()].map(\n    (YEAR_BACK) =>\n      (yearNum - YEAR_BACK).toString() +\n      \"-\" +\n      (shortYearNum + 1 - YEAR_BACK).toString()\n  );\n\n  return (\n    <>\n      <Grid style={{ paddingTop: 10 }} container>\n        <Grid item xs style={{ height: \"100px\" }}>\n          <Select value={selectedSeason} onChange={handleSeasonChange}>\n            {years.map((season) => (\n              <MenuItem key={season} value={season}>\n                {season}\n              </MenuItem>\n            ))}\n          </Select>\n        </Grid>\n        <Grid item xs style={{ height: \"100px\" }}>\n          counts:\n          {JSON.stringify(counts)}\n        </Grid>\n        <Grid item xs style={{ height: \"100px\" }}>\n          <Select value={selectedTeam} onChange={handleTeamChange}>\n            {allTeams &&\n              allTeams.map(([teamName, teamId]) => (\n                <MenuItem key={teamId} value={teamId}>\n                  {teamName}\n                </MenuItem>\n              ))}\n          </Select>\n        </Grid>\n      </Grid>\n      {stats.length && (\n        <Grid container justify={\"center\"}>\n          <Grid item>\n            <TableContainer component={Paper}>\n              <Table aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>\n                    {Object.keys(stats[0]).map((title) => (\n                      <TableCell>{title}</TableCell>\n                    ))}\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {stats.map((playerRow) => {\n                    return (\n                      <TableRow key={playerRow.player}>\n                        {Object.keys(playerRow).map((key) => {\n                          let color = \"black\";\n                          const regularColoredFields = [\n                            \"player\",\n                            \"regularPercentage\",\n                          ];\n                          if (!regularColoredFields.includes(key)) {\n                            const isGreen =\n                              playerRow[key] > playerRow.regularPercentage;\n                            // isGreen && internalCounts[key]++;\n                            color = isGreen ? \"#4BB543\" : \"red\";\n                          }\n\n                          return (\n                            <TableCell style={{ color }}>\n                              {playerRow[key]}\n                            </TableCell>\n                          );\n                        })}\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Grid>\n        </Grid>\n      )}\n    </>\n  );\n}\n","import \"./App.css\";\nimport MainAppBar from \"./components/MainAppBar.component\";\nimport MainPage from \"./components/MainPage.component\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <link\n        rel=\"stylesheet\"\n        href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\"\n      />\n      <link\n        rel=\"stylesheet\"\n        href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n      />\n      <MainAppBar />\n      <MainPage />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}